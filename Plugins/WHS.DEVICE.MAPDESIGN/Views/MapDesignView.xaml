<Page x:Class="WHS.DEVICE.MAPDESIGN.Views.MapDesignView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                      xmlns:cal="http://www.caliburnproject.org"
       xmlns:local="clr-namespace:WHS.DEVICE.MAPDESIGN"
           xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                 xmlns:Convert="clr-namespace:WHS.DEVICE.MAPDESIGN.Converters"
             xmlns:pt="http://propertytools.org/wpf"
             xmlns:lex="http://wpflocalizeextension.codeplex.com"
             xmlns:Commons="clr-namespace:WHS.DEVICE.MAPDESIGN.Commons" x:Name="page"
            xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             lex:LocalizeDictionary.DesignCulture="zh-CN"
             lex:LocalizeDictionary.OutputMissingKeys="True"
             lex:ResxLocalizationProvider.DefaultAssembly="WHS.DEVICE.MAPDESIGN"
             lex:ResxLocalizationProvider.DefaultDictionary="Strings"
             mc:Ignorable="d" 
             Title="{lex:Loc Key=MAPDESIGN.Content.Title}"
             d:DesignHeight="450" d:DesignWidth="800">
    <Page.Resources>
        <Convert:DoubleConver x:Key="DoubleConver"/>
    </Page.Resources>

    <Grid>
        <Grid.Resources>
            <local:CustomControlFactory x:Key="CustomControlFactory"/>
            <local:CustomOperator x:Key="CustomOperator"/>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="100"></RowDefinition>
            <RowDefinition Height="100*"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="100*"></ColumnDefinition>
            <ColumnDefinition Width="50"></ColumnDefinition>
        </Grid.ColumnDefinitions>


        <WrapPanel HorizontalAlignment="Stretch" Grid.Row="0" Grid.ColumnSpan="2" Background="AliceBlue">
            <WrapPanel.Resources>
                <Style x:Key="txb" TargetType="{x:Type TextBox}">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="BorderBrush" Value="Red"/>
                            <Setter Property="ToolTip" 
                                Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </WrapPanel.Resources>
            <Label Content="宽:" Margin="5 5 0 0"></Label>
            <TextBox Width="50"  Margin="5 5 0 0" Controls:TextBoxHelper.Watermark="宽" Text="{Binding CanvasWidth, Converter={StaticResource DoubleConver}, Mode=TwoWay}"  Style="{StaticResource txb}">
            </TextBox>
            <Label Content="高:" Margin="5 5 0 0"></Label>
            <TextBox  Width="50"  Margin="5 5 0 0" Controls:TextBoxHelper.Watermark="高" Text="{Binding CanvasHeight, Converter={StaticResource DoubleConver}, Mode=TwoWay}"  Style="{StaticResource txb}">
            </TextBox>
            <Label Content="行:" Margin="5 5 0 0"></Label>
            <TextBox Width="50"  Margin="5 5 0 0" Controls:TextBoxHelper.Watermark="行" Text="{Binding Row, Converter={StaticResource DoubleConver}, Mode=TwoWay}"  Style="{StaticResource txb}">
            </TextBox>
            <Label Content="列:" Margin="5 5 0 0"></Label>
            <TextBox  Width="50"  Margin="5 5 0 0" Controls:TextBoxHelper.Watermark="列" Text="{Binding Column, Converter={StaticResource DoubleConver}, Mode=TwoWay}"  Style="{StaticResource txb}">
            </TextBox>
            <Button  Width="100"  Margin="5 5 0 0" 
                     cal:Message.Attach="[Event Click] = [Action AddFloor($source,$dataContext)]"
                     >添加地图层</Button>
            <Button  Width="100"  Margin="5 5 0 0" 
                     cal:Message.Attach="[Event Click] = [Action Resize($source,$dataContext)]"
                     >重置画布大小</Button>
            <Button  Width="50" HorizontalContentAlignment="Center"  Margin="5 5 0 0" cal:Message.Attach="[Event Click] = [Action Redo($source,$dataContext)]">
                <iconPacks:FontAwesome Width="25"  Kind="RedoSolid"></iconPacks:FontAwesome>
            </Button>
            <Button  Width="50"  Margin="5 5 0 0" cal:Message.Attach="[Event Click] = [Action Undo($source,$dataContext)]">
                <iconPacks:FontAwesome Width="25" Kind="UndoSolid"></iconPacks:FontAwesome>
            </Button>
            <Label Margin="5 5 0 0"  Content="快捷键：F4(属性) Del(删除) SHIFT或CTRL{多选}"></Label>
            <Label Margin="5 5 0 0"  Content="{Binding SaveFile}"></Label>
            <Button  Width="100"  Margin="5 5 0 0" cal:Message.Attach="[Event Click] = [Action Save($source,$dataContext)]">保存</Button>
            <Controls:ToggleSwitch IsOn="{Binding IsDragable,Mode=TwoWay}" OnContent="拖动点" OffContent="禁止拖动点"></Controls:ToggleSwitch>
        </WrapPanel>
        <Controls:MetroTabControl x:Name="MetroTabControl" Grid.Row="1" Grid.ColumnSpan="2"
                                          SelectedIndex="{Binding tabSelectedIndex,Mode=TwoWay}"
                                          SelectedItem="{Binding tabSelectedItem,Mode=TwoWay}"
                                          TabStripPlacement="Right"
                                          KeepVisualTreeInMemoryWhenChangingTabs="True"
                                      Controls:TabControlHelper.Underlined="SelectedTabItem"
                                  TabItemClosingEvent="MetroTabControl_TabItemClosingEvent"
                                      ItemsSource="{Binding mapModels}">
            <Controls:MetroTabControl.ItemContainerStyle>
                <Style TargetType="{x:Type  Controls:MetroTabItem}">
                    <Setter Property="Background" Value="Transparent"/>
                </Style>
            </Controls:MetroTabControl.ItemContainerStyle>
            <Controls:MetroTabControl.ItemTemplate>
                <DataTemplate>
                    <!--<TextBlock  Controls:HeaderedControlHelper.HeaderFontSize="20" 
                               Controls:TabControlHelper.CloseButtonEnabled="True"
                               Text = "{Binding  Floor,StringFormat={}{0}层}"></TextBlock>-->
                    <Controls:MetroTabItem Controls:HeaderedControlHelper.HeaderFontSize="20"
                                           VirtualizingPanel.IsVirtualizing="True"
                                                CloseButtonEnabled="True"
                                           CloseButtonMargin="5"
                                           CloseTabCommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Header}"
                                           Header="{Binding  Floor,StringFormat={}{0}层}"/>


                </DataTemplate>
            </Controls:MetroTabControl.ItemTemplate>
            <Controls:MetroTabControl.ContentTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30"></ColumnDefinition>
                            <ColumnDefinition Width="100*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Slider  Height="200"  Grid.Row="0"  Grid.Column="0" Opacity="0.5" x:Name="Scale"
                            LargeChange="0.1"
                            Maximum="5"
                            Minimum="0"
                            Orientation="Vertical"
                            SmallChange="0.01"
                            TickFrequency="5"
                            TickPlacement="TopLeft"
                            Value="{Binding ScaleValue}" />
                        <Border  Grid.Row="0" Grid.Column="1" ClipToBounds="True"
                                 cal:Message.Attach="[Event PreviewMouseDown] = [Action outsidewrapper_PreviewMouseDown($source,$eventArgs)];
                                 [Event PreviewMouseMove] = [Action outsidewrapper_PreviewMouseMove($source,$eventArgs)];
                                 [Event PreviewMouseUp] = [Action outside_PreviewMouseUp($source,$eventArgs)];
                                 [Event SizeChanged] = [Action outside_SizeChanged($source,$eventArgs)];
                                  [Event PreviewMouseWheel] = [Action outside_PreviewMouseWheel($source,$eventArgs)]">
                            <Grid>
                                <ItemsControl ItemsSource="{Binding canvasBackgroudItemsSource}" > 
                                    <ItemsControl.Template>
                                        <ControlTemplate TargetType="{x:Type ItemsControl}">
                                            <Canvas Background="Transparent" 
                                                x:Name="CanvasBackgroudPanel"
                                                IsItemsHost="True"
                                                RenderTransformOrigin="0.5,0.5">
                                                <Canvas.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="{Binding Value, ElementName=Scale, TargetNullValue=1}"
                                                ScaleY="{Binding Value, ElementName=Scale, TargetNullValue=1}"/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform X="{Binding DriftX}"
                                            Y="{Binding DriftY}"/>
                                                    </TransformGroup>
                                                </Canvas.RenderTransform>
                                            </Canvas>
                                        </ControlTemplate>
                                    </ItemsControl.Template>
                                </ItemsControl>
                                <ListBox  ItemsSource="{Binding canvasItemsSource}" x:Name="innerlist"
                                          SelectedItem="{Binding selectedGridItem}" 
                                                 VirtualizingPanel.IsVirtualizing="True"
                                          cal:Message.Attach="[Event PreviewKeyUp] = [Action PreviewKeyUp($source,$eventArgs)]"
                                          VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                                     SelectionMode="Extended">
                                    <ListBox.Template>
                                        <ControlTemplate TargetType="{x:Type ListBox}">
                                            <Canvas Background="Transparent" x:Name="CanvasPanel" 
                                                IsItemsHost="True" 
                                                                   cal:Message.Attach="[Event PreviewMouseMove] = [Action canvas_PreviewMouseMove($source,$eventArgs)];
                                 [Event PreviewMouseUp] = [Action canvas_PreviewMouseUp($source,$eventArgs)];
                                 [Event PreviewMouseDown] = [Action canvas_PreviewMouseDown($source,$eventArgs)];"
                                                RenderTransformOrigin="0.5,0.5" 
                                                >
                                                <Canvas.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="{Binding Value, ElementName=Scale, TargetNullValue=1}"
                                                ScaleY="{Binding Value, ElementName=Scale, TargetNullValue=1}"/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform X="{Binding DriftX}"
                                            Y="{Binding DriftY}"/>
                                                    </TransformGroup>
                                                </Canvas.RenderTransform>
                                            </Canvas>
                                        </ControlTemplate>
                                    </ListBox.Template>
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="Canvas.Left" Value="{Binding Left,Mode=TwoWay}"/>
                                            <Setter Property="Canvas.Top" Value="{Binding Top,Mode=TwoWay}"/>
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="BorderThickness" Value="0"/>
                                            <Setter Property="Margin" Value="0"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Style.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="False"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                </ListBox>
                            </Grid>
                        </Border>
                    </Grid>
                </DataTemplate>
            </Controls:MetroTabControl.ContentTemplate>
        </Controls:MetroTabControl>

        <Controls:FlyoutsControl Grid.RowSpan="2" Grid.ColumnSpan="2" >
            <Controls:Flyout Width="300"  Height="500"  Header="属性" IsOpen="{Binding IsOpen}" Position="Right" Theme="Inverse" >
                <pt:PropertyGrid
                ControlFactory="{StaticResource  CustomControlFactory}"
                Operator="{StaticResource CustomOperator}"
                    RequiredAttribute="{Binding CustomDisplayType}" ShowReadOnlyProperties="True"
                    SelectedObject="{Binding tabSelectedItem.selectedGridItem}"/>
            </Controls:Flyout>
        </Controls:FlyoutsControl>

    </Grid>
</Page>
